@using Microsoft.AspNetCore.Components.Web
@using System.Diagnostics
@using System.Data;
@using ReservationAdmin.Models;
@using System.Globalization;
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using System.Linq;


<select @onchange="(e => GetChoose(e))">
    <option value="Year">Jaar</option>
    <option value="Month">Maand</option>
</select>

<select @onchange="(e => GetChooseWhichMonth(e))">
    <option value="01">Jan</option>
    <option value="02">Feb</option>
    <option value="03">Maart</option>
    <option value="04">April</option>
    <option value="05">Mei</option>
    <option value="06">Juni</option>
    <option value="07">Juli</option>
    <option value="08">August</option>
    <option value="09">Sept</option>
    <option value="10">Okt</option>
    <option value="11">Nov</option>
    <option value="12">Nov</option>

</select>

<ChartJsBarChart @ref="_barChart" Config="@_barChartConfig" Width="700" Height="300" />



@code
{

    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataVoorspelling;
    private BarDataset<DoubleWrapper> _barDataSetWerkelijk;
    SqlConnection con = new SqlConnection();
    List<double> Result = new List<double>();
    [Parameter]
    public int Month { get; set; } = 1;
    public string Chose { get; set; }

    public int LastYear = DateTime.Now.Year - 1;
    public int SecondYear = DateTime.Now.Year - 2;
    public int ThirdYear = DateTime.Now.Year - 3;
    public int FourthYear = DateTime.Now.Year - 4;
    public int FifthYear = DateTime.Now.Year - 5;
    public int year = DateTime.Now.Year;

    protected override void OnInitialized()
    {

        SetBarChart();
        GetFutureYear();
    }

    public void SetBarChart()
    {
        _barChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Statiek - Aantal reserveringen"

                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                    new BarCategoryAxis
                    {
                    BarPercentage = 0.8,
                    BarThickness = BarThickness.Flex
                    }
                    },
                    YAxes = new List<CartesianAxis>
                        {
                        new BarLinearCartesianAxis
                        {
                        Ticks = new LinearCartesianTicks
                        {
                        BeginAtZero = true
                        }
                        }
                        }
                }
            }
        };
        _barDataVoorspelling = new BarDataset<DoubleWrapper>
        {
            Label = "Voorspelling",
            BackgroundColor = "#A3A1FB",
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _barDataSetWerkelijk = new BarDataset<DoubleWrapper>
        {
            Label = "Werkelijk",
            BackgroundColor = "#56D9FE",
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
    }

    public void GetChooseWhichMonth(ChangeEventArgs e)
    {
        RemoveData();
        Month = Convert.ToInt32(e.Value);
        SetLastMonth();

    }

    public void GetChoose(ChangeEventArgs e)
    {
        RemoveData();
        Chose = e.Value.ToString();
        if (Chose == "Year")
        {
            GetFutureYear();

        }
        else
        {
            SetLastMonth();
        }

    }

    private async Task RemoveData()
    {
        for (int i = 1; i < 31; i++)
        {
            if (_barChartConfig.Data.Labels.Count > 0)
            {

                _barChartConfig.Data.Labels.RemoveAt(_barChartConfig.Data.Labels.Count - 1);
            }

            if (_barDataVoorspelling.Data.Count > 0)
            {
                _barDataVoorspelling.RemoveAt(_barDataVoorspelling.Data.Count - 1);
            }

            if (_barDataSetWerkelijk.Data.Count > 0)
            {
                _barDataSetWerkelijk.RemoveAt(_barDataSetWerkelijk.Data.Count - 1);
            }
        }
    }


    private async Task AddData()
    {
        await _barChart.Update();
    }

    public void SetLastMonth()
    {

        for (int i = 1; i < 31; i++)
        {
            con.SqlQuery("SELECT COUNT(*)  FROM `reservation` WHERE `Date` = '" + year + "-" + Month + "-" + i + "'");
            con.QueryEx();
            foreach (DataRow dr in con.QueryEx().Rows)
            {
                string maand = i.ToString()+",";
                _barDataSetWerkelijk.AddRange(new double[] { Convert.ToDouble(dr[0]) }.Wrap());
            }
        }
        for (int i = 1; i < 31; i++)
        {
            con.SqlQuery("SELECT ROUND((year1.Total1+year2.Total2+year3.Total3+year4.Total4+year5.Total5)/5) FROM (" +
            " (SELECT COUNT(*) as Total1 FROM `reservation` WHERE `Date`='"+SecondYear+"-" + Month + "-"+i+"') year1," +
            " (SELECT COUNT(*) as Total2 FROM `reservation` WHERE `Date`='"+LastYear+"-" + Month + "-"+i+"') year2," +
            "(SELECT COUNT(*) as Total3 FROM `reservation` WHERE `Date` = '"+ThirdYear+"-" + Month + "-"+i+"') year3," +
            "(SELECT COUNT(*) as Total4 FROM `reservation` WHERE `Date` ='"+FourthYear +"-" + Month + "-"+i+"') year4," +
            "(SELECT COUNT(*) as Total5 FROM `reservation` WHERE `Date` = '"+FifthYear+"-" + Month+ "-"+i+"') year5)");
            con.QueryEx();
            foreach (DataRow dr in con.QueryEx().Rows)
            {

                _barDataVoorspelling.AddRange(new double[] { Convert.ToDouble(dr[0]) }.Wrap());
            }
        }





        _barChartConfig.Data.Labels.AddRange(new[] {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","24","25","26","27","28","29","30","31"});
        //   _barChartConfig.Data.Labels.AddRange(new [] {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31});
        _barChartConfig.Data.Datasets.Add(_barDataSetWerkelijk);

        AddData();
    }


    public void GetFutureYear()
    {
        _barChartConfig.Data.Labels.AddRange(new[] { "Jan", "Feb", "Maart", "April", "Mei", "Juni", "Juli", "August", "September", "Oktober", "November", "Decemeber" });

        for (int i = 1; i < 13; i++)
        {
            con.SqlQuery("SELECT ROUND((year1.Total1+year2.Total2+year3.Total3+year4.Total4+year5.Total5)/5) FROM (" +
            " (SELECT COUNT(*) as Total1 FROM `reservation` WHERE `Date` BETWEEN '"+SecondYear+"-" + i + "-1' AND '2018-" + i + "-31') year1," +
            " (SELECT COUNT(*) as Total2 FROM `reservation` WHERE `Date` BETWEEN '"+LastYear+"-" + i + "-1'AND '2019-" + i + "-31') year2," +
            "(SELECT COUNT(*) as Total3 FROM `reservation` WHERE `Date` BETWEEN '"+ThirdYear+"-" + i + "-1'AND '2017-" + i + "-31') year3," +
            "(SELECT COUNT(*) as Total4 FROM `reservation` WHERE `Date` BETWEEN '"+FourthYear +"-" + i + "-1'AND '2016-" + i + "-31') year4," +
            "(SELECT COUNT(*) as Total5 FROM `reservation` WHERE `Date` BETWEEN '"+FifthYear+"-" + i + "-1'AND '2015-" + i + "-31') year5)");
            con.QueryEx();
            foreach (DataRow dr in con.QueryEx().Rows)
            {

                _barDataVoorspelling.AddRange(new double[] { Convert.ToDouble(dr[0]) }.Wrap());
            }
        }

        for (int i = 1; i < 13; i++)
        {
            con.SqlQuery("SELECT COUNT(*) FROM `reservation` WHERE  `Date` BETWEEN '"+ year +"-" + i + "-1' AND '2020-" + i + "-31'");
            con.QueryEx();
            foreach (DataRow dr in con.QueryEx().Rows)
            {
                _barDataSetWerkelijk.AddRange(new double[] { Convert.ToDouble(dr[0])}.Wrap());
            }
        }

        _barChartConfig.Data.Datasets.Add(_barDataVoorspelling);
        _barChartConfig.Data.Datasets.Add(_barDataSetWerkelijk);
        AddData();
    }
}
